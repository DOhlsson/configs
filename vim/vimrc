" .vimrc by Daniel Ohlsson
" To reload the vimrc while editing it use :so %

" plugin management with vim-plug
try
  call plug#begin()

  " Tools
  Plug 'junegunn/fzf'                 " fuzzy search
  Plug 'junegunn/fzf.vim'             " need both of these
  Plug 'tpope/vim-fugitive'           " git
  Plug 'preservim/nerdtree'           " file browser
  Plug 'Xuyuanp/nerdtree-git-plugin'  " nerdtree git icons
  Plug 'easymotion/vim-easymotion'    " cool motions tool
  Plug 'airblade/vim-rooter'          " cd down to git root
  Plug 'neoclide/coc.nvim', {'branch': 'release'}   " LSP integration

  " Rust
  Plug 'rust-lang/rust.vim'
  Plug 'ron-rs/ron.vim'

  " Javascript
  Plug 'pangloss/vim-javascript'

  " Styling
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'morhetz/gruvbox'

  call plug#end()
catch
endtry

" Gruvbox colorscheme
colorscheme gruvbox
set background=dark
let g:gruvbox_contrast_light='hard'

" Some regular stuff
filetype plugin indent on
syntax on
set autoindent
set shiftwidth=2
set tabstop=2
set expandtab
set ignorecase
set incsearch
set hlsearch
set tabpagemax=100
set showcmd
set hidden
set cursorline
set number
set scrolloff=10

" collect swapfiles in one directory
silent !mkdir -p ~/.vim/swapfiles
set directory=$HOME/.vim/swapfiles

" Disable scratchpad preview for YCM
set completeopt-=preview

" Autocomplete code
set omnifunc=syntaxcomplete#Complete

" Autocompletion more like bash
set wildmode=longest,list,full
set wildmenu

" Do not write new inode when saving file
set backupcopy=yes

" Check if working file is updated when entering that buffer
au FocusGained,BufEnter * :silent! checktime

" Clear the jumplist once vim starts
autocmd VimEnter * clearjumps

" Use space as <leader> key
let mapleader = " "

" Remap s key as a delete without writing to cut register
noremap s "_d
noremap ss "_dd
noremap S "_D

" Remap x key so that it does not write to cut register
noremap x "_x
noremap X "_X

" Remap Y key to act as all the other capital letters
" Seriously, why is Y = yy when D = d$ and C = c$ ?!
noremap Y y$

" Some maps for tab commands
" noremap <Tab> :tabn<CR>
" noremap <S-Tab> :tabN<CR>
" noremap gf <C-w>gf

" Use F12 to switch buffers
nnoremap <silent> <F12> :bn<CR>
nnoremap <silent> <S-F12> :bp<CR>

" Move vertically by visual line
nnoremap j gj
nnoremap k gk

" Disable arrow-keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" Get highlighting group under cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Fzf bindings
nmap <leader>f :Files<CR>
nmap <leader>gc :Commits<CR>
nmap <leader>gf :GFiles<CR>
nmap <leader>gs :GFiles?<CR>
nmap <leader>h :History<CR>
nmap <leader>b :Buffers<CR>
nmap <leader>s :Rg<CR>

" fugitive.vim bindings
nmap <leader>gb :Git blame<CR>

" find current file in NERDTree
nmap <leader>t :NERDTreeFind<CR>

" Start NERDTree and put the cursor back in the other window.
autocmd VimEnter * NERDTreeVCS | wincmd p

" Airline
let g:airline_powerline_fonts = 1

" Easymotion
let g:EasyMotion_keys = 'asdghklqwertyuiopzxcvbnmfj'
let g:EasyMotion_do_mapping = 0
nmap <leader>el <Plug>(easymotion-overwin-line)
nmap <leader>ew <Plug>(easymotion-overwin-w)
nmap <leader>ef <Plug>(easymotion-overwin-f)

" vim-rooter
let g:rooter_patterns = ['.git']


"""" Buffer commands

" Rust specific indentation
autocmd FileType rust setlocal shiftwidth=4 tabstop=4 expandtab

" Javascript specific indentation
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 expandtab
autocmd BufNewFile,BufRead *.json set ft=javascript

" Python specific indentation
autocmd FileType python setlocal tabstop=4 expandtab

" Yaml fixes
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2 expandtab
autocmd FileType yaml let b:autoformat_autoindent=0

" Html
autocmd FileType html setlocal shiftwidth=2 tabstop=2 expandtab


"""" CoC related stuff

" When installing, run :CocInstall coc-tsserver coc-rust-analyzer
" TODO: use system rust-analyzer

" Start CoC disabled, enable with <leader>cs
let g:coc_start_at_startup = v:false

set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Start Coc
nmap <leader>cs :CocStart<CR>

" Use `<leader>cd` to get all diagnostics of current buffer in location list.
nmap <leader>cd :CocDiagnostics<CR>

" Format current buffer
nmap <leader>cf :call CocAction('format')<CR>

" Get suggestions to fix warnings and errors on current line
nmap <leader>ca <Plug>(coc-codeaction-line)

" Rename a symbol
nmap <leader>cr <Plug>(coc-rename)


let g:coc_disable_startup_warning = 1
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gD <Plug>(coc-declaration)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>


function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
